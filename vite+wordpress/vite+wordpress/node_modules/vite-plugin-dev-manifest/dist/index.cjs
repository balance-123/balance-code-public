'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');
var vite = require('vite');
var os = require('os');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var os__default = /*#__PURE__*/_interopDefaultLegacy(os);

function resolveHost(host) {
  if (!host)
    return "localhost";
  if (host === true) {
    const nInterface = Object.values(os__default["default"].networkInterfaces()).flatMap((nInterface2) => nInterface2 ?? []).filter(
      (detail) => detail && detail.address && (typeof detail.family === "string" && detail.family === "IPv4" || typeof detail.family === "number" && detail.family === 4)
    ).filter((detail) => {
      return detail.address !== "127.0.0.1";
    })[0];
    if (!nInterface)
      return "localhost";
    return nInterface.address;
  }
  return host;
}

const MANIFEST_NAME = "manifest.dev";
const createSimplifyPath = (root, base) => (path2) => {
  path2 = vite.normalizePath(path2);
  if (root !== "/" && path2.startsWith(root)) {
    path2 = path2.slice(root.length);
  }
  if (path2.startsWith(base)) {
    path2 = path2.slice(base.length);
  }
  if (path2[0] === "/") {
    path2 = path2.slice(1);
  }
  return path2;
};
const plugin = ({ omitInputs = [], manifestName = MANIFEST_NAME, delay, clearOnClose = true } = {}) => ({
  name: "dev-manifest",
  enforce: "post",
  configureServer(server) {
    const { config, httpServer } = server;
    if (!config.env.DEV || !config.build.manifest) {
      return;
    }
    httpServer?.once("listening", () => {
      const { root: _root, base } = config;
      const root = vite.normalizePath(_root);
      const protocol = config.server.https ? "https" : "http";
      const host = resolveHost(config.server.host);
      const port = config.server.port;
      const url = `${protocol}://${host}:${port}${base}`;
      const manifest = {
        url,
        inputs: {}
      };
      const inputOptions = config.build.rollupOptions?.input ?? {};
      const simplifyPath = createSimplifyPath(root, base);
      config.server.origin = `${protocol}://${host}:${port}`;
      if (typeof inputOptions === "string") {
        manifest.inputs["main"] = simplifyPath(inputOptions);
      } else if (Array.isArray(inputOptions)) {
        for (const name of inputOptions) {
          if (omitInputs.includes(name))
            continue;
          manifest.inputs[name] = simplifyPath(name);
        }
      } else {
        for (const [name, path2] of Object.entries(inputOptions)) {
          if (omitInputs.includes(name))
            continue;
          manifest.inputs[name] = simplifyPath(path2);
        }
      }
      const outputDir = path__default["default"].isAbsolute(config.build.outDir) ? config.build.outDir : path__default["default"].resolve(config.root, config.build.outDir);
      if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
      }
      const writeManifest = () => {
        fs.writeFileSync(path__default["default"].resolve(outputDir, `${manifestName}.json`), JSON.stringify(manifest, null, "	"));
      };
      if (delay !== void 0 && typeof delay === "number") {
        setTimeout(() => writeManifest(), delay);
      } else {
        writeManifest();
      }
    });
    httpServer?.once("close", () => {
      if (!clearOnClose)
        return;
      const outputDir = path__default["default"].isAbsolute(config.build.outDir) ? config.build.outDir : path__default["default"].resolve(config.root, config.build.outDir);
      const manifestPath = path__default["default"].resolve(outputDir, `${manifestName}.json`);
      if (fs.existsSync(manifestPath))
        fs.rmSync(manifestPath);
    });
  }
});

exports["default"] = plugin;
